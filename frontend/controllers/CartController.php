<?php
/**
 * Created by PhpStorm.
 */

namespace frontend\controllers;

use common\helpers\CollectorHelper;
use common\helpers\MailHelper;
use common\models\Order;
use common\models\OrderItem;
use frontend\components\cart\CartModalWidget;
use frontend\helpers\CartHelper;
use Yii;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\web\NotFoundHttpException;

class CartController extends Controller
{
    /**
     * @param $action
     * @return bool
     * @throws BadRequestHttpException
     */
    public function beforeAction($action): bool
    {
        Yii::$app->getSession()->open();

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * @param $action
     * @param $result
     * @return mixed
     */
    public function afterAction($action, $result)
    {
        Yii::$app->getSession()->close();

        return parent::afterAction($action, $result);
    }

    /**
     * @return string|\yii\web\Response
     */
    public function actionIndex()
    {
        if (empty($_SESSION['cart'])) {
            return $this->redirect(['site/index']);
        }

        return $this->render('index', [
            'cartItems' => CartHelper::getCartData(),
        ]);
    }

    public function actionOrder()
    {
        if (empty($_SESSION['cart'])) {
            return $this->redirect(['site/index']);
        }

        $model = new Order();

        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            // оформление
            if ($model->save()) {
                $cartData = CartHelper::getCartData();

                foreach ($cartData['cartData'] as $cartDatum) {
                    $orderItem = new OrderItem();
                    $orderItem->order_id = $model->id;
                    $orderItem->product_id = $cartDatum['productId'];
                    $orderItem->count = $cartDatum['quantity'];
                    $orderItem->sum = $cartDatum['sum'];
                    $orderItem->save();
                }
            }

            MailHelper::sendMail($model, Yii::$app->params['mailer']['email']);
            MailHelper::sendMail($model, 'temirovgroup@gmail.com');

            // Очищаем корзину
            unset($_SESSION['cart']);

            return $this->redirect(['cart/thanks', 'id' => $model->created_at, 'uin' => $model->uin]);
        }

        return $this->render('order', [
            'cartItems' => CartHelper::getCartData(),
            'model' => $model,
        ]);
    }

    /**
     * @param $id
     * @param $uin
     * @return string|\yii\web\Response
     */
    public function actionThanks($id, $uin)
    {
        if (!Order::find()->where(['created_at' => $id, 'uin' => $uin])->exists()) {
            return $this->goHome();
        }

        return $this->render('thanks', [
            'uin' => $uin,
        ]);
    }

    /**
     * @return \yii\web\Response
     * @throws BadRequestHttpException
     * @throws \Throwable
     */
    public function actionAdd(): \yii\web\Response
    {
        if (!$this->request->isAjax) {
            throw new BadRequestHttpException('Ошибка запроса!');
        }

        $productId = $this->request->get('product_id');
        $quantity = $this->request->get('quantity', 1);

        CartHelper::add($productId, $quantity);

        $productData = CartHelper::getCartData();

        return $this->asJson([
            'cartModal' => CartModalWidget::widget(),
            'itemSum' => CollectorHelper::numFormat($productData['cartData'][$productId]['sum']),
        ]);
    }

    /**
     * @return \yii\web\Response
     * @throws BadRequestHttpException
     * @throws \Throwable
     */
    public function actionReduce()
    {
        if (!$this->request->isAjax) {
            throw new BadRequestHttpException('Ошибка запроса!');
        }

        $productId = $this->request->get('product_id');

        CartHelper::reduce($productId);

        $productData = CartHelper::getCartData();

        return $this->asJson([
            'cartModal' => CartModalWidget::widget(),
            'itemSum' => CollectorHelper::numFormat($productData['cartData'][$productId]['sum']),
        ]);
    }

    /**
     * @return \yii\web\Response
     * @throws BadRequestHttpException
     * @throws \Throwable
     */
    public function actionDelete()
    {
        if (!$this->request->isAjax) {
            throw new BadRequestHttpException('Ошибка запроса!');
        }

        $productId = $this->request->get('product_id');

        CartHelper::delete($productId);
        $productData = CartHelper::getCartData();

        return $this->asJson([
            'cartModal' => CartModalWidget::widget(),
            'cartCount' => $productData['cartCount'],
        ]);
    }
}
